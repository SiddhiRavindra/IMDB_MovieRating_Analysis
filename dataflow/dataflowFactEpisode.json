{
	"name": "dataflowFactEpisode",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_title_episode",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDimMovie",
						"type": "DatasetReference"
					},
					"name": "sourceDimMovie"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableDIMDate",
						"type": "DatasetReference"
					},
					"name": "sourceDimDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTestFactEpisode",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "joinDimMovie"
				},
				{
					"name": "joinDimDate"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     jobid as string (uuid())",
				"}",
				"source(output(",
				"          TCONST as string,",
				"          PARENTTCONST as string,",
				"          SEASONNUMBER as decimal(38,0),",
				"          EPISODENUMBER as decimal(38,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source",
				"source(output(",
				"          MOVIE_SK as decimal(10,0),",
				"          TCONST as string,",
				"          START_DATE_ID as date,",
				"          END_DATE_ID as date,",
				"          TITLETYPE as string,",
				"          PRIMARYTITLE as string,",
				"          ORIGINALTITLE as string,",
				"          ISADULT as string,",
				"          STARTYEAR as decimal(38,0),",
				"          ENDYEAR as decimal(38,0),",
				"          RUNTIMEMINUTES as decimal(38,0),",
				"          GENRES as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDimMovie",
				"source(output(",
				"          DATE_SK as decimal(0,0),",
				"          DATE as date,",
				"          YEAR as decimal(38,0),",
				"          MONTH as decimal(38,0),",
				"          DAY_OF_WEEK as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDimDate",
				"source keyGenerate(output(fact_episode_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1, sourceDimMovie join(source@TCONST == sourceDimMovie@TCONST,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimMovie",
				"joinDimMovie, sourceDimDate join(STARTYEAR == YEAR,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimDate",
				"joinDimDate derive(DI_JOB_ID = $jobid,",
				"          DI_LOAD_DATE = currentTimestamp()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FACT_EPISODE_SK as decimal(0,0),",
				"          DATE_SK as decimal(0,0),",
				"          MOVIE_SK as decimal(10,0),",
				"          EPISODENUMBER as decimal(38,0),",
				"          SEASONNUMBER as decimal(38,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          FACT_EPISODE_SK = fact_episode_SK,",
				"          DATE_SK,",
				"          MOVIE_SK,",
				"          EPISODENUMBER,",
				"          SEASONNUMBER,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DATE",
				"     )) ~> sink"
			]
		}
	}
}