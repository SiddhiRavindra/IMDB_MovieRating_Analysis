{
	"name": "dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_title_episode",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDimMovie",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableDIMDate",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTestFactEpisode",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TCONST as string,",
				"          PARENTTCONST as string,",
				"          SEASONNUMBER as decimal(38,0),",
				"          EPISODENUMBER as decimal(38,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source",
				"source(output(",
				"          MOVIE_SK as decimal(10,0),",
				"          TCONST as string,",
				"          START_DATE_ID as date,",
				"          END_DATE_ID as date,",
				"          TITLETYPE as string,",
				"          PRIMARYTITLE as string,",
				"          ORIGINALTITLE as string,",
				"          ISADULT as string,",
				"          STARTYEAR as decimal(38,0),",
				"          ENDYEAR as decimal(38,0),",
				"          RUNTIMEMINUTES as decimal(38,0),",
				"          GENRES as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          DATE_SK as decimal(0,0),",
				"          DATE as date,",
				"          YEAR as decimal(38,0),",
				"          MONTH as decimal(38,0),",
				"          DAY_OF_WEEK as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source2",
				"surrogateKey1, source1 lookup(source@TCONST == source1@TCONST,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 derive(episode_date = toDate(concat(toString(STARTYEAR), '-01-01'), 'yyyy-MM-dd')\r",
				") ~> derivedColumn1",
				"derivedColumn1, source2 lookup(episode_date == DATE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"lookup2 derive(DI_JOB_ID = uuid(),",
				"          DI_LOAD_DT = currentTimestamp(),",
				"          rowNum = rowNum) ~> derivedColumn2",
				"source keyGenerate(output(rowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FACT_EPISODE_SK as decimal(0,0),",
				"          DATE_SK as decimal(0,0),",
				"          MOVIE_SK as decimal(10,0),",
				"          EPISODENUMBER as decimal(38,0),",
				"          SEASONNUMBER as decimal(38,0),",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DATE as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          FACT_EPISODE_SK = rowNum,",
				"          DATE_SK,",
				"          MOVIE_SK,",
				"          EPISODENUMBER,",
				"          SEASONNUMBER,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DATE = DI_LOAD_DT",
				"     )) ~> sink1"
			]
		}
	}
}